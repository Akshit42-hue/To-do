{"version":3,"sources":["components /TodoForm.js","components /Todo.js","components /TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","input","setInput","inputRef","useRef","useEffect","current","focus","className","onSubmit","e","preventDefault","id","Math","floor","random","text","type","placeholder","value","onChange","target","ref","Todo","todos","completeTodo","removeTodo","updateTodo","edit","setEdit","map","todo","index","isComplete","onClick","TodoList","setTodos","test","newtodos","updateTodos","removeArr","filter","todoId","newValue","prev","item","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAyCeA,MAvCf,SAAkBC,GAElB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAWC,iBAAO,MAmBpB,OAlBJC,qBAAU,WACNF,EAASG,QAAQC,WAkBb,uBAAMC,UAAY,YAAYC,SAXjB,SAAAC,GACjBA,EAAEC,iBAEFZ,EAAMU,SAAS,CACXG,GAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,KAAMf,IAGTC,EAAS,KAGN,UACI,uBAAOe,KAAO,OACdC,YAAc,aACdC,MAAQlB,EACRO,UAAY,aACZY,SApBS,SAAAV,GACjBR,EAASQ,EAAEW,OAAOF,QAoBVG,IAAOnB,IAEP,wBAAQK,UAAY,cAApB,sB,sBCaOe,MAzCnB,YAA8D,IAA/CC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAE5C,EAAuB3B,mBAAS,CAC5BY,GAAG,KACHO,MAAM,KAFV,mBAAOS,EAAP,KAAYC,EAAZ,KAaA,OAAGD,EAAKhB,GACG,cAAC,EAAD,CAAUgB,KAAMA,EAAMnB,SATZ,SAAAU,GAChBQ,EAAWC,EAAKhB,GAAIO,GACpBU,EAAQ,CACJjB,GAAI,KACJO,MAAM,QAQRK,EAAMM,KAAI,SAACC,EAAMC,GAAP,OACb,sBACExB,UAAWuB,EAAKE,WAAa,oBAAsB,WADrD,UAIE,qBAAmBC,QAAS,kBAAMT,EAAaM,EAAKnB,KAApD,SACGmB,EAAKf,MADEe,EAAKnB,IAGf,sBAAKJ,UAAU,QAAf,UACE,cAAC,IAAD,CACE0B,QAAS,kBAAMR,EAAWK,EAAKnB,KAC/BJ,UAAU,gBAEZ,cAAC,IAAD,CACE0B,QAAS,kBAAML,EAAQ,CAAEjB,GAAImB,EAAKnB,GAAIO,MAAOY,EAAKf,QAClDR,UAAU,mBAZTwB,OCuBAG,MAhDf,WACI,MAA0BnC,mBAAS,IAAnC,mBAAOwB,EAAP,KAAcY,EAAd,KAsCA,OACI,gCACC,2DACA,cAAC,EAAD,CAAU3B,SAvCC,SAAAsB,GACZ,GAAIA,EAAKf,OAAQ,QAAQqB,KAAKN,EAAKf,MAAnC,CAGA,IAAMsB,EAAQ,CAAIP,GAAJ,mBAAaP,IAC3BY,EAASE,OAmCR,cAAC,EAAD,CAAMd,MAAOA,EAAOC,aAhCJ,SAAAb,GACjB,IAAI2B,EAAcf,EAAMM,KAAI,SAAAC,GAIxB,OAHGA,EAAKnB,KAAOA,IACXmB,EAAKE,YAAcF,EAAKE,YAErBF,KAEXK,EAASG,IAyBwCb,WAZlC,SAAAd,GACf,IAAM4B,EAAY,YAAIhB,GAAOiB,QAAO,SAAAV,GAAI,OAAIA,EAAKnB,KAAOA,KAExDwB,EAASI,IASkEb,WAtB5D,SAACe,EAAQC,GACpBA,EAAS3B,OAAQ,QAAQqB,KAAKM,EAAS3B,OAI3CoB,GAAS,SAAAQ,GAAI,OAAIA,EAAKd,KAAI,SAAAe,GAAI,OAAKA,EAAKjC,KAAO8B,EAASC,EAAWE,eCf5DC,MATf,WACE,OACE,qBAAKtC,UAAU,WAAf,SAEE,cAAC,EAAD,OCGSuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.58fffee5.chunk.js","sourcesContent":["import React,{useState, useEffect, useRef} from 'react'\n\nfunction TodoForm(props) {\n\nconst [input, setInput] = useState('');\n\nconst inputRef = useRef(null)\nuseEffect(() => {\n    inputRef.current.focus()\n})\n\nconst handleChange = e =>{\n    setInput(e.target.value);\n}\n\nconst handleSubmit = e =>{\n    e.preventDefault();\n\n    props.onSubmit({\n        id: Math.floor(Math.random() * 100000),\n        text: input\n    })\n\n     setInput('');\n};\n    return (\n        <form className = \"todo-form\" onSubmit = {handleSubmit}>\n            <input type = \"text\" \n            placeholder = \"Add a todo\"\n            value ={input}\n            className = \"todo-input\"\n            onChange = {handleChange}\n            ref = {inputRef}\n            />\n            <button className = \"todo-button\">\n                todo\n            </button>\n            </form>\n    )\n}\n\nexport default TodoForm\n","import React,{useState} from 'react'\nimport TodoForm from './TodoForm'\nimport TodoList from './TodoList'\nimport {RiCloseCircleLine} from 'react-icons/ri'\nimport {TiEdit} from 'react-icons/ti'\n\nfunction Todo({todos, completeTodo, removeTodo, updateTodo}) {\n\n    const [edit,setEdit] = useState({\n        id:null,\n        value:''\n    });\n\n    const submitUpdate = value =>{\n         updateTodo(edit.id, value)\n         setEdit({\n             id: null,\n             value:''\n         })\n    }\n\n    if(edit.id){\n        return <TodoForm edit={edit} onSubmit={submitUpdate} />\n    }\n\n    return todos.map((todo, index) => (\n        <div\n          className={todo.isComplete ? 'todo-row complete' : 'todo-row'}\n          key={index}\n        >\n          <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n            {todo.text}\n          </div>\n          <div className='icons'>\n            <RiCloseCircleLine\n              onClick={() => removeTodo(todo.id)}\n              className='delete-icon'\n            />\n            <TiEdit\n              onClick={() => setEdit({ id: todo.id, value: todo.text })}\n              className='edit-icon'\n            />\n          </div>\n        </div>\n      ));\n    };\n    \n    export default Todo;\n","import React,{useState} from 'react'\nimport TodoForm from './TodoForm'\nimport Todo from './Todo'\nfunction TodoList() {\n    const [todos, setTodos] = useState([]);\n\n    const addTodo = todo =>{\n        if(!todo.text || /^\\s*$/.test(todo.text)){\n            return\n        }\n        const newtodos = [todo, ...todos]\n        setTodos(newtodos)\n    }\n    \n    const completeTodo = id => {\n        let updateTodos = todos.map(todo => {\n            if(todo.id === id){\n                todo.isComplete = !todo.isComplete\n            }\n            return todo\n        })\n        setTodos(updateTodos);\n    };\n\n    const updateTodo = (todoId, newValue) => {\n        if(!newValue.text || /^\\s*$/.test(newValue.text)){\n            return;\n        }\n\n        setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)))\n    }\n\n\n\n    const removeTodo = id =>{\n        const removeArr = [...todos].filter(todo => todo.id !== id) \n\n        setTodos(removeArr);\n    };\n\n    \n\n    return (\n        <div>\n         <h1>What's the plan for today</h1>\n         <TodoForm onSubmit={addTodo}/>   \n         <Todo todos={todos} completeTodo={completeTodo} removeTodo = {removeTodo} updateTodo= {updateTodo}/>\n        </div>\n    )\n}\n\nexport default TodoList\n","\nimport './App.css';\nimport TodoForm from './components /TodoForm';\nimport TodoList from './components /TodoList';\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n     \n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}